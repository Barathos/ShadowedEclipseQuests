sub EVENT_KILLED_MERIT {
    my $char_id = $client->CharacterID();
    my $npc_level = $npc->GetLevel();

    # Define items and their keys for player items
    my %player_items = (
        28113 => { next_item_id => 28114, key => "$char_id-28113", threshold => 750, level_requirement => 55 },
        28114 => { next_item_id => 28623, key => "$char_id-28114", threshold => 750, level_requirement => 55 },
        28623 => { next_item_id => 31647, key => "$char_id-28623", threshold => 750, level_requirement => 55 },
        31647 => { next_item_id => 31648, key => "$char_id-31647", threshold => 750, level_requirement => 55 },
        31648 => { next_item_id => 32463, key => "$char_id-31648", threshold => 750, level_requirement => 55 },
        32463 => { next_item_id => 32464, key => "$char_id-32463", threshold => 750, level_requirement => 55 },
        32464 => { next_item_id => 33024, key => "$char_id-32464", threshold => 750, level_requirement => 55 },
        33024 => { next_item_id => 33025, key => "$char_id-33024", threshold => 750, level_requirement => 55 },
        33025 => { next_item_id => 33026, key => "$char_id-33025", threshold => 750, level_requirement => 55 },

        # New item entry for 399 with level requirement 60 and threshold 1000
        399 => { next_item_id => 400, key => "$char_id-399", threshold => 1000, level_requirement => 60 },
    );

    # Define items and their keys for bot items
    my %bot_items = (
        28113 => { next_item_id => 28114, key => "$char_id-bot-28113", threshold => 750, level_requirement => 55 },
        28114 => { next_item_id => 28623, key => "$char_id-bot-28114", threshold => 750, level_requirement => 55 },
        28623 => { next_item_id => 31647, key => "$char_id-bot-28623", threshold => 750, level_requirement => 55 },
        31647 => { next_item_id => 31648, key => "$char_id-bot-31647", threshold => 750, level_requirement => 55 },
        31648 => { next_item_id => 32463, key => "$char_id-bot-31648", threshold => 750, level_requirement => 55 },
        32463 => { next_item_id => 32464, key => "$char_id-bot-32463", threshold => 750, level_requirement => 55 },
        32464 => { next_item_id => 33024, key => "$char_id-bot-32464", threshold => 750, level_requirement => 55 },
        33024 => { next_item_id => 33025, key => "$char_id-bot-33024", threshold => 750, level_requirement => 55 },
        33025 => { next_item_id => 33026, key => "$char_id-bot-33025", threshold => 750, level_requirement => 55 },

        # New item entry for 399 with level requirement 60 and threshold 1000 for bot
        399 => { next_item_id => 400, key => "$char_id-bot-399", threshold => 1000, level_requirement => 60 },
    );

    # Function to handle progression of items for either bots or players
    sub process_item_progression {
        my ($entity, $items_ref, $is_bot, $bot_name) = @_;

        # Detect the item equipped by the bot
        my $equipped_item_id;
        if ($is_bot) {
            $equipped_item_id = $entity->GetBotItemIDBySlot(0);  # Get item in primary slot
        } else {
            $equipped_item_id = $client->GetItemIDAt(0);  # For players
        }

        # Check if we have a valid equipped item
        return unless defined $equipped_item_id;

        foreach my $item_id (keys %{$items_ref}) {
            # Only proceed if the equipped item matches this entry
            next unless $equipped_item_id == $item_id;

            my $item_info = $items_ref->{$item_id};
            my $key = $item_info->{key};
            my $next_item_id = $item_info->{next_item_id};
            my $threshold = $item_info->{threshold};
            my $level_requirement = $item_info->{level_requirement};

            # Level check for the item
            next unless $npc_level >= $level_requirement;

            # Generate a unique key for each bot based on their name and item id
            if ($is_bot) {
                $key = "16-" . $bot_name . "-$item_id";  # Unique key for each bot using bot name and item ID
            }

            # Retrieve current kill count or initialize if none
            my $kill_count = quest::get_data($key) || 0;
            $kill_count++;

            # Save updated kill count
            quest::set_data($key, $kill_count);

            # If bot, send kill count message only to the player (not to the bot itself)
            if ($is_bot) {
                $client->Message(5, "Bot $bot_name has killed: $kill_count NPCs.");
            } else {
                $client->Message(5, "You have killed: $kill_count NPCs while using item $item_id.");
            }

            # Check if kill count meets upgrade threshold
            if ($kill_count >= $threshold) {
                $client->DeleteItemInInventory(0, 1, true); # Remove current item
                $client->SummonItem($next_item_id);         # Summon upgraded item
                $client->Message(14, "Congrats, the item has been upgraded to item $next_item_id.");

                # Reset kill count, carrying over any extra kills
                my $remaining_kills = $kill_count - $threshold;
                quest::set_data($items_ref->{$next_item_id}{key}, $remaining_kills);
            }
        }
    }

    # Process player item progression
    process_item_progression($client, \%player_items, 0);

    # Process bot item progression using GetBotList to get all bots in the zone
    my @bot_list = $entity_list->GetBotList();
    foreach my $bot (@bot_list) {
        my $bot_id = $bot->GetBotID();
        my $bot_name = quest::GetBotNameByID($bot_id);  # Get the bot's name
        process_item_progression($bot, \%bot_items, 1, $bot_name);
    }
}

    # ---- Heirloom Checking Logic ----
    my $heirloom_item_id = 473;  # The heirloom item

    # Check if item 473 (heirloom) is in the powersource slot (slot 21)
    my $slot_id = 21;
    my $equipped_item_id = $client->GetItemIDAt($slot_id);

    return unless defined $equipped_item_id && $equipped_item_id == $heirloom_item_id;

    # Both conditions are met: player has the heirloom and it is in the powersource slot
    my $heirloom_key = "$char_id-$heirloom_item_id";
    my $heirloom_kill_count = quest::get_data($heirloom_key) || 0;
    $heirloom_kill_count++;
    quest::set_data($heirloom_key, $heirloom_kill_count);

    # Notify the player of heirloom progress
    $client->Message(5, "Your heirloom item has absorbed $heirloom_kill_count kills.");

    # Upgrade the heirloom item if threshold is met
    my $heirloom_kill_threshold = 750;
    if ($heirloom_kill_count >= $heirloom_kill_threshold) {
        my %heirloom_class_upgrades = (
            1  => 600254, # Warrior - Glacierheart Core
            2  => 600246, # Cleric - Crystal of Eternal Winter
            3  => 600256, # Paladin - Sanctified Frost Core
            4  => 600260, # Ranger - Winterfang Core
            5  => 600255, # Shadow Knight - Abyssal Ice Core
            6  => 600248, # Druid - Snowbloom Essence
            7  => 600258, # Monk - Frosted Spirit Stone
            8  => 600261, # Bard - Echoing Ice Gem
            9  => 600257, # Rogue - Icefang Crystal
            10 => 600247, # Shaman - Frostbound Spirit Core
            11 => 600252, # Necromancer - Wraithfrost Core
            12 => 600249, # Wizard - Glacial Conflagration Core
            13 => 600250, # Magician - Frigid Elemental Core
            14 => 600251, # Enchanter - Frostveil Shard
            15 => 600253, # Beastlord - Frostclaw Essence
            16 => 600259, # Berserker - Avalanche Shard
        );

        my $player_class = $client->GetClass();
        my $upgraded_item_id = $heirloom_class_upgrades{$player_class};

        if ($upgraded_item_id) {
            $client->DeleteItemInInventory($slot_id, 1, true); # Remove heirloom
            $client->SummonItem($upgraded_item_id);           # Summon upgraded heirloom
            $client->Message(14, "Congrats! Your heirloom has evolved into a class-specific item: $upgraded_item_id.");
            quest::delete_data($heirloom_key);
        } else {
            $client->Message(13, "Error: No upgrade defined for your class.");
        }
    }

# global_npc.pl

my $last_player_name = "";  # Initialize variable to store the name of the player attacking the NPC

sub EVENT_COMBAT {
    if ($npc->IsRaidTarget() || $npc->IsRareSpawn()) {  # Check if the NPC is a raid target or rare spawn
        if ($combat_state == 1) {  # Combat starts
            $last_player_name = $client ? $client->GetCleanName() : "";  # Store player's name if available
        }
    }
}

sub EVENT_DEATH {
    if ($npc->IsRaidTarget() || $npc->IsRareSpawn()) {  # Check if the NPC is a raid target or rare spawn
        my $npc_name = $npc->GetCleanName();  # Get the NPC's name
        my $player_name = $last_player_name || "Unknown";  # Use the stored player's name or "Unknown" if no name was captured

        # Announce in-game
        quest::gmsay("$npc_name has been killed by $player_name", 14, 1, 0, 0);

        # Send message to Discord
        quest::discordsend("victory", "$npc_name has been killed by $player_name");

        # Optionally clear the player's name after death
        $last_player_name = "";
    }
}
