sub EVENT_ENTERZONE { #message only appears in Cities / Pok and wherever the Wayfarer Camps (LDON) is in.  This message won't appear in the player's home city.
if($ulevel >= 15 && !defined($qglobals{Wayfarer})) {
    if($client->GetStartZone()!=$zoneid && ($zoneid == 1 || $zoneid == 2 || $zoneid == 3 || $zoneid == 8 || $zoneid == 9 || $zoneid == 10 || $zoneid == 19 || $zoneid == 22 || $zoneid == 23 || $zoneid == 24 || $zoneid == 29 || $zoneid == 30 || $zoneid == 34 || $zoneid == 35 || $zoneid == 40 || $zoneid == 41 || $zoneid == 42 || $zoneid == 45 || $zoneid == 49 || $zoneid == 52 || $zoneid == 54 || $zoneid == 55 || $zoneid == 60 || $zoneid == 61 || $zoneid == 62 || $zoneid == 67 || $zoneid == 68 || $zoneid == 75 || $zoneid == 82 || $zoneid == 106 || $zoneid == 155 || $zoneid == 202 || $zoneid == 382 || $zoneid == 383 || $zoneid == 392 || $zoneid == 393 || $zoneid == 408)) {
        $client->Message(15,"A mysterious voice whispers to you, 'If you can feel me in your thoughts, know this -- something is changing in the world and I reckon you should be a part of it. I do not know much, but I do know that in every home city and the wilds there are agents of an organization called the Wayfarers Brotherhood. They are looking for recruits . . . If you can hear this message, you are one of the chosen. Rush to your home city, or search the West Karanas and Rathe Mountains for a contact if you have been exiled from your home for your deeds, and find out more. Adventure awaits you, my friend.'");
    }   
}
my @ZoneList = (
        36
    );

        
my $max_scaling_levels = 10; # You can adjust this value to determine the maximum scaling allowed
my $scale_factor = 0;
my %original_levels; # Hash to store original levels of NPCs
my $scaling_timer_active = 0; # Flag to check if the scaling timer is already set
sub EVENT_TIMER {
    if ($timer eq "scale") {       
        if (grep { $_ == $zoneid } @ZoneList) {
                 
            # Reset the timer flag before scaling iteration
            $scaling_timer_active = 0;
            # Increment the scaling factor for each timer activation
            $scale_factor++;
            # Retrieve the highest level among all clients in the zone
            my $highest_level = 0;
            my $players_found = 0; # Flag to track if players are found in the zone
            my @players_in_zone; # Array to store player names

            foreach my $client ($entity_list->GetClientList()) {
                my $client_level = $client->GetLevel();
                if ($client_level > $highest_level) {
                    $highest_level = $client_level;
                }
                $players_found = 1; # Set the flag since at least one player is found
                #push @players_in_zone, $client->GetName(); # Store player names in the array
            }

            if ($players_found >= 1) {
                # Increment the scaling factor for each timer activation
                $scale_factor++;
                # Calculate the maximum scaling level allowed
                my $max_scaling_level = $highest_level + $max_scaling_levels;
                # Loop through all NPCs in the zone
                foreach my $npc_entity ($entity_list->GetNPCList()) {
                    my $npc = $npc_entity->CastToNPC();
                    # Skip any NPC that has already been scaled
                    next if exists $original_levels{$npc->GetID()};
                    # Get the original level of the NPC
                    my $original_level = $npc->GetLevel();
                    $original_levels{$npc->GetID()} = $original_level; # Store the original level
                    # Calculate the new scaled level for the NPC
                    my $scaled_level = $original_level + $scale_factor;
                    # Ensure the NPC level doesn't exceed the maximum scaling level or 75
                    $scaled_level = ($scaled_level <= $max_scaling_level) ? $scaled_level : $max_scaling_level;
                    $scaled_level = ($scaled_level <= 75) ? $scaled_level : 75;
                    # Scale the NPC
                    $npc->ScaleNPC($scaled_level);
                }
                # Clear the hash after scaling iteration
                %original_levels = ();
                # Announce the presence of players in the zone for testing purposes
                #my $player_names = join(", ", @players_in_zone);
                #quest::shout("Players present in the zone: $player_names");
            } else {
                # No players in the zone, reset the scaling factor to 0 and clear the hash
                $scale_factor = 0;
                %original_levels = ();
                quest::stopalltimers();
            }
        }
    }
}

if ($zoneid == 36){
    quest::message(15, "Upon entering this dungeon, you get a sense that, although it is already an undesirable place, it has somehow been disturbed even more and      unsettled its undead inhabitants.");
    }
}
sub EVENT_LEVEL_UP {
    
    AutoTrain();

}

sub AutoTrain {
$client->Message(15, "You have reached level $level! Scribing spells...");
# set all available skills to maximum for race/class at current level
foreach my $skill ( 0 .. 42, 48 .. 54, 70 .. 74 ) {
    next unless $client->CanHaveSkill($skill);
    my $maxSkill = $client->MaxSkill( $skill, $client->GetClass(), $ulevel );
    next unless $maxSkill > $client->GetRawSkill($skill);
    $client->SetSkill( $skill, $maxSkill );
    }
    # scribe all spells for current level
    quest::scribespells( $ulevel, $ulevel - 1 );
    # train all discs for current level
    quest::traindiscs( $ulevel, $ulevel - 1 );
}