sub EVENT_KILLED_MERIT {
    my $char_id = $client->CharacterID();
    my $npc_level = $npc->GetLevel();

    # Only proceed if the NPC is level 55 or higher
    return unless $npc_level >= 55;

    # Define items and their keys
    my %items = (
        28113 => { next_item_id => 28114, key => "$char_id-28113" },
        28114 => { next_item_id => 28623, key => "$char_id-28114" },
        28623 => { next_item_id => 31647, key => "$char_id-28623" },
        31647 => { next_item_id => 31648, key => "$char_id-31647" },
        31648 => { next_item_id => 32463, key => "$char_id-31648" },
        32463 => { next_item_id => 32464, key => "$char_id-32463" },
        32464 => { next_item_id => 33024, key => "$char_id-32464" },
        33024 => { next_item_id => 33025, key => "$char_id-33024" },
        33025 => { next_item_id => 33026, key => "$char_id-33025" },
    );

    foreach my $item_id (keys %items) {
        my $item_info = $items{$item_id};
        my $key = $item_info->{key};
        my $next_item_id = $item_info->{next_item_id};

        # Check if player has the item equipped
        if ($client->HasItemEquippedByID($item_id)) {
            # Retrieve current kill count or initialize if none
            my $kill_count = quest::get_data($key) || 0;
            $kill_count++;

            # Save updated kill count
            quest::set_data($key, $kill_count);
            $client->Message(5, "You have killed: $kill_count NPCs while using item $item_id.");

            # Check if kill count meets upgrade threshold
            if ($kill_count >= 750) {
                $client->NukeItem($item_id);              # Remove current item
                $client->SummonItem($next_item_id);       # Summon upgraded item
                $client->Message(14, "Congrats, the item has been upgraded to item $next_item_id.");
                
                # Reset kill count, carrying over any extra kills
                my $remaining_kills = $kill_count - 750;
                quest::set_data($items{$next_item_id}{key}, $remaining_kills);
            }
        }
    }
}



# global_npc.pl

my $last_player_name = "";  # Initialize variable to store the name of the player attacking the NPC

sub EVENT_COMBAT {
    if ($npc->IsRaidTarget() || $npc->IsRareSpawn()) {  # Check if the NPC is a raid target or rare spawn
        if ($combat_state == 1) {  # Combat starts
            $last_player_name = $client ? $client->GetCleanName() : "";  # Store player's name if available
        }
    }
}

sub EVENT_DEATH {
    if ($npc->IsRaidTarget() || $npc->IsRareSpawn()) {  # Check if the NPC is a raid target or rare spawn
        my $npc_name = $npc->GetCleanName();  # Get the NPC's name
        my $player_name = $last_player_name || "Unknown";  # Use the stored player's name or "Unknown" if no name was captured

        # Announce in-game
        quest::gmsay("$npc_name has been killed by $player_name", 14, 1, 0, 0);

        # Send message to Discord
        quest::discordsend("victory", "$npc_name has been killed by $player_name");

        # Optionally clear the player's name after death
        $last_player_name = "";
    }
}
