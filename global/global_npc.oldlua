-- NPC Transformation and Kill Tracking

function event_spawn(e)
    -- Halloween Content Check
    if eq.is_content_flag_enabled("peq_halloween") then
        -- Exclude mounts and pets
        if e.self:GetCleanName():findi("mount") or e.self:IsPet() then
            return
        end

        -- Soulbinders and Priests of Discord transformation
        if e.self:GetCleanName():findi("soulbinder") or e.self:GetCleanName():findi("priest of discord") then
            e.self:ChangeRace(eq.ChooseRandom(14, 60, 82, 85))
            e.self:ChangeSize(6)
            e.self:ChangeTexture(1)
            e.self:ChangeGender(2)
        end

        -- Zones where Halloween changes occur
        local halloween_zones = { [202] = true, [150] = true, [151] = true, [344] = true }
        local not_allowed_bodytypes = { [11] = true, [60] = true, [66] = true, [67] = true }

        if halloween_zones[eq.get_zone_id()] and not not_allowed_bodytypes[e.self:GetBodyType()] then
            e.self:ChangeRace(eq.ChooseRandom(14, 60, 82, 85))
            e.self:ChangeSize(6)
            e.self:ChangeTexture(1)
            e.self:ChangeGender(2)
        end
    end
end

-- Kill Tracker Configuration
local kill_tracker_config = {
    [28113] = { required_kills = 500, reward_item_id = 67890 }, -- Example item and reward
    -- Add more items as needed
}

function event_npc_death(e)
    local killer = e.killer

    -- Check if the killer is a player
    if killer:IsClient() then
        local char_id = killer:CharacterID()
        eq.debug("Player killed NPC: " .. killer:GetCleanName()) -- Debug message

        -- Loop through the tracked items
        for item_id, config in pairs(kill_tracker_config) do
            if killer:HasItem(item_id) then
                -- Create a unique key for the player's progress with this item
                local kill_count_key = "KillTracker_" .. item_id .. "_" .. char_id
                local current_kills = tonumber(eq.get_data(kill_count_key)) or 0

                -- Debug message for current kills
                eq.debug("Current kills for item " .. item_id .. ": " .. current_kills)

                -- Increment the kill count
                current_kills = current_kills + 1
                eq.set_data(kill_count_key, tostring(current_kills))

                -- Notify the player of their progress
                killer:Message(15, "You have slain " .. current_kills .. " out of " .. config.required_kills .. " creatures for item ID " .. item_id .. ".")

                -- Check if they reached the required kills
                if current_kills >= config.required_kills then
                    -- Debug message for completion
                    eq.debug("Player " .. killer:GetCleanName() .. " completed kill tracker for item " .. item_id)

                    -- Remove the tracking item
                    killer:NukeItem(item_id)

                    -- Give the reward item
                    killer:SummonItem(config.reward_item_id)

                    -- Congratulate the player
                    killer:Message(14, "Congratulations! You have completed the kill tracker challenge for item ID " .. item_id .. "!")

                    -- Clear the data bucket
                    eq.delete_data(kill_count_key)
                end
            end
        end
    else
        eq.debug("NPC killed by non-player entity.")
    end
end
