# Configuration
my $RADIUS = 40;  # Distance from player for spawning
my $COMPLETION_FLAG_SUFFIX = "-completed";
my $WAVE_NUMBER_SUFFIX = "-wave_number";
my @BOSS_WAVES = (21, 41, 61, 81);  # Boss wave numbers
my @npc_waves = (
    [36003], # Wave 1
    [36003, 36019], # Wave 2
    [36003, 36019, 36040], # Wave 3
    [36003, 36019, 36040, 36072], # Wave 4
    [36003, 36019, 36040, 36072, 36028], # Wave 5
    [36003, 36019, 36040, 36072, 36028, 36076], # Wave 6
    [36003, 36019, 36040, 36072, 36028, 36076, 36049], # Wave 7
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048], # Wave 8
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009], # Wave 9
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056], # Wave 10
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010], # Wave 11
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003], # Wave 12
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019], # Wave 13
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040], # Wave 14
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072], # Wave 15
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072, 36028], # Wave 16
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072, 36028, 36076], # Wave 17
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072, 36028, 36076, 36049], # Wave 18
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048], # Wave 19
    [36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009, 36056, 36010, 36003, 36019, 36040, 36072, 36028, 36076, 36049, 36048, 36009], # Wave 20
    [1282], # Boss Wave 21
    [2000048, 2000049], # Wave 22
    [2000048, 2000049, 2000050], # Wave 23
    [2000048, 2000049, 2000050, 2000051], # Wave 24
    [2000048, 2000049, 2000050, 2000051, 2000052], # Wave 25
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053], # Wave 26
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054], # Wave 27
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055], # Wave 28
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056], # Wave 29
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057], # Wave 30
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058], # Wave 31
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059], # Wave 32
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060], # Wave 33
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061], # Wave 34
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062], # Wave 35
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062, 2000063], # Wave 36
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062, 2000063, 2000064], # Wave 37
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062, 2000063, 2000064, 2000065], # Wave 38
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062, 2000063, 2000064, 2000065, 2000066], # Wave 39
    [2000048, 2000049, 2000050, 2000051, 2000052, 2000053, 2000054, 2000055, 2000056, 2000057, 2000058, 2000059, 2000060, 2000061, 2000062, 2000063, 2000064, 2000065, 2000066, 2000047], # Wave 40
    [1281], # Boss Wave 41
    [2000067, 2000068], # Wave 42
    [2000067, 2000068, 2000069], # Wave 43
    [2000067, 2000068, 2000069, 2000070], # Wave 44
    [2000067, 2000068, 2000069, 2000070, 2000071], # Wave 45
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072], # Wave 46
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073], # Wave 47
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074], # Wave 48
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075], # Wave 49
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076], # Wave 50
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077], # Wave 51
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078], # Wave 52
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079], # Wave 53
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080], # Wave 54
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081], # Wave 55
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081, 2000082], # Wave 56
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081, 2000082, 2000083], # Wave 57
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081, 2000082, 2000083, 2000084], # Wave 58
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081, 2000082, 2000083, 2000084, 2000085], # Wave 59
    [2000067, 2000068, 2000069, 2000070, 2000071, 2000072, 2000073, 2000074, 2000075, 2000076, 2000077, 2000078, 2000079, 2000080, 2000081, 2000082, 2000083, 2000084, 2000085, 2000086], # Wave 60
    [1283], # Wave 61
    [2000087, 2000088], # Wave 62
    [2000087, 2000088, 2000089], # Wave 63
    [2000087, 2000088, 2000089, 2000090], # Wave 64
    [2000087, 2000088, 2000089, 2000090, 2000091], # Wave 65
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092], # Wave 66
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093], # Wave 67
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094], # Wave 68
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095], # Wave 69
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096], # Wave 70
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097], # Wave 71
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098], # Wave 72
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099], # Wave 73
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100], # Wave 74
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101], # Wave 75
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102], # Wave 76
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102, 2000103], # Wave 77
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102, 2000103, 2000104], # Wave 78
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102, 2000103, 2000104, 2000105], # Wave 79
    [2000087, 2000088, 2000089, 2000090, 2000091, 2000092, 2000093, 2000094, 2000095, 2000096, 2000097, 2000098, 2000099, 2000100, 2000101, 2000102, 2000103, 2000104, 2000105, 2000106,], # Wave 80
    [1284], # Boss Wave 81
);

# Helper Functions
sub spawn_wave_npcs {
    my ($wave_num, $client) = @_;
    return unless $wave_num > 0 && $wave_num <= scalar(@npc_waves);
    return unless $client && $client->IsClient();

    my @current_wave_npcs = @{$npc_waves[$wave_num - 1]};
    my $num_npcs = scalar @current_wave_npcs;
    my $angle_increment = 360 / $num_npcs;

    foreach my $i (0..$num_npcs-1) {
        my $npc_id = $current_wave_npcs[$i];
        my $angle = $i * $angle_increment;
        my $rad = $angle * (3.14159 / 180);

        my $spawn_x = $x + ($RADIUS * cos($rad));
        my $spawn_y = $y + ($RADIUS * sin($rad));
        
        my $npc_obj = quest::spawn2($npc_id, 0, 0, $spawn_x, $spawn_y, $z, $h);
        my $npc = $entity_list->GetNPCByID($npc_obj);
        $npc->AddToHateList($client, 1) if $client && $npc;
    }
}

sub get_player_data {
    return unless $client && $client->IsClient();
    my $char_id = $client->CharacterID();
    return {
        wave_key => $char_id . $WAVE_NUMBER_SUFFIX,
        completion_key => $char_id . $COMPLETION_FLAG_SUFFIX,
        current_wave => quest::get_data($char_id . $WAVE_NUMBER_SUFFIX) || 0,
        has_completed => quest::get_data($char_id . $COMPLETION_FLAG_SUFFIX) || 0
    };
}

sub handle_wave_completion {
    my ($player_data, $current_wave) = @_;
    
    # Check if this is the final wave (81)
    if ($current_wave == scalar(@npc_waves)) {
        # Set completion flag if not already completed
        unless ($player_data->{has_completed}) {
            quest::set_data($player_data->{completion_key}, 1);
            quest::whisper("Congratulations! You've completed all waves!");
        }
        return 1;
    }
    return 0;
}

# Main Event Handler
sub EVENT_SAY {
    my $player_data = get_player_data($client);
    my $wave = $player_data->{current_wave};
    my $total_waves = scalar(@npc_waves);

    # Command Handlers
    if ($text =~ /hail/i) {
        if ($wave == 0) {
            quest::whisper("Let's go around the world in 80 waves! Say [" . quest::saylink("READY", 1) . "] to begin.");
            quest::whisper("You may also [" . quest::saylink("SELECT", 1) . "] specific waves.") if $player_data->{has_completed};
        }
        elsif ($wave < $total_waves) {
            quest::whisper("Continue? Say [" . quest::saylink("READY", 1) . "] for wave " . ($wave + 1) . ".");
        }
        else {
            quest::whisper("Challenge complete! You've proven yourself.");
            handle_wave_completion($player_data, $wave);
        }
    }
    elsif ($text =~ /ready/i) {
        if ($wave < $total_waves) {
            $wave++;
            quest::set_data($player_data->{wave_key}, $wave);
            quest::whisper("Prepare for wave $wave!");
            spawn_wave_npcs($wave, $client);
            
            # Check for wave completion with current wave number
            handle_wave_completion($player_data, $wave);
        }
        else {
            quest::whisper("You've already completed all waves.");
        }
    }
    elsif ($text =~ /select/i && $player_data->{has_completed}) {
        quest::whisper("Select wave: [" . quest::saylink("LIST", 1) . "] (1-$total_waves)");
    }
    elsif ($text =~ /list/i && $player_data->{has_completed}) {
        quest::whisper("Available waves:");
        for (my $i = 1; $i <= $total_waves; $i += 5) {
            my $wave_list = join(", ", 
                map { quest::saylink($_, 1) } 
                grep { $_ <= $total_waves } ($i..($i+4))
            );
            quest::whisper("Waves $i-" . ($i+4) . ": $wave_list");
        }
    }
    elsif ($text =~ /^(\d+)$/i && $player_data->{has_completed}) {
        my $requested_wave = $1;
        if ($requested_wave > 0 && $requested_wave <= $total_waves) {
            quest::set_data($player_data->{wave_key}, $requested_wave - 1);
            quest::whisper("Starting wave $requested_wave!");
            spawn_wave_npcs($requested_wave, $client);
        }
        else {
            quest::whisper("Please select wave 1-$total_waves.");
        }
    }
    elsif ($text =~ /reset/i && $player_data->{has_completed}) {
        quest::delete_data($player_data->{wave_key});
        quest::whisper("Progress reset. [" . quest::saylink("READY", 1) . "] to restart.");
    }
    elsif ($text=~/check/i) {
        quest::whisper(sprintf("Wave: %d, Completed: %s", 
            $wave, 
            $player_data->{has_completed} ? "Yes" : "No"
        ));
    }
}